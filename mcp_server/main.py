# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T04:11:50+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity
from fastapi import Header

from models import (
    V1KeysApiCurrentSerialGetResponse,
    V1KeysApiExpirySerialGetResponse,
    V1KeysApiFindSerialGetResponse,
    V1ProductsApiCountPostRequest,
    V1ProductsApiCountPostResponse,
    V1ProductsApiFindPostRequest,
    V1ProductsApiFindPostResponse,
    V1ProductsApiListPostRequest,
    V1ProductsApiListPostResponse,
    V1ProductsApiPatchRequest,
    V1ProductsApiPostRequest,
    V1ProductsApiSavePostRequest,
    V1ProductsApiSavePostResponse,
    V1SubscriptionsApiCountPostRequest,
    V1SubscriptionsApiCountPostResponse,
    V1SubscriptionsApiDisablePatchRequest,
    V1SubscriptionsApiDisablePostRequest,
    V1SubscriptionsApiEnablePatchRequest,
    V1SubscriptionsApiEnablePostRequest,
    V1SubscriptionsApiFindPostRequest,
    V1SubscriptionsApiFindPostResponse,
    V1SubscriptionsApiListPostRequest,
    V1SubscriptionsApiListPostResponse,
    V1SubscriptionsApiPostRequest,
    V1SubscriptionsApiPutRequest,
    V1SubscriptionsApiSavePostRequest,
    V1SubscriptionsApiSavePostResponse,
)

app = MCPProxy(
    contact={'x-twitter': 'theTechComp'},
    description='KeyServ API',
    title='KeyServ',
    version='1.4.5',
    servers=[{'url': 'https://keyserv.solutions'}],
)


@app.get('/v1/KeysApi/Current/{serial}', tags=['key_operations'])
def keys_api__current(serial: str):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/v1/KeysApi/Custom/{serial}', tags=['key_operations'])
def keys_api__custom(serial: str):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/v1/KeysApi/Expiry/{serial}', tags=['key_operations'])
def keys_api__expiry(serial: str):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/v1/KeysApi/Find/{serial}', tags=['key_operations'])
def keys_api__find(serial: str):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch('/v1/ProductsApi', tags=['product_operations'])
def products_api__patch_product(body: V1ProductsApiPatchRequest):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/v1/ProductsApi', tags=['product_operations'])
def products_api__patch_product2(body: V1ProductsApiPostRequest):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/v1/ProductsApi/Count', tags=['product_operations'])
def products_api__count(body: V1ProductsApiCountPostRequest):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/v1/ProductsApi/Find', tags=['product_operations'])
def products_api__find(
    page: Optional[int] = None, body: V1ProductsApiFindPostRequest = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/v1/ProductsApi/List', tags=['product_operations'])
def products_api__list(
    page: Optional[int] = None, body: V1ProductsApiListPostRequest = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/v1/ProductsApi/Save', tags=['product_operations'])
def products_api__save(body: V1ProductsApiSavePostRequest):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete('/v1/ProductsApi/{serial}', tags=['key_operations'])
def products_api__delete_product(
    x__api__key: str = Header(..., alias='X-Api-Key'), serial: str = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/v1/ProductsApi/{serial}', tags=['key_operations'])
def products_api__delete_product2(
    x__api__key: str = Header(..., alias='X-Api-Key'), serial: str = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/v1/SubscriptionsApi', tags=['subscription_operations'])
def subscriptions_api__put_subscription2(body: V1SubscriptionsApiPostRequest):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put('/v1/SubscriptionsApi', tags=['subscription_operations'])
def subscriptions_api__put_subscription(body: V1SubscriptionsApiPutRequest):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/v1/SubscriptionsApi/Count', tags=['subscription_operations'])
def subscriptions_api__count(body: V1SubscriptionsApiCountPostRequest):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch('/v1/SubscriptionsApi/Disable', tags=['subscription_operations'])
def subscriptions_api__disable(body: V1SubscriptionsApiDisablePatchRequest):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/v1/SubscriptionsApi/Disable', tags=['subscription_operations'])
def subscriptions_api__disable2(body: V1SubscriptionsApiDisablePostRequest):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch('/v1/SubscriptionsApi/Enable', tags=['subscription_operations'])
def subscriptions_api__enable(body: V1SubscriptionsApiEnablePatchRequest):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/v1/SubscriptionsApi/Enable', tags=['subscription_operations'])
def subscriptions_api__enable2(body: V1SubscriptionsApiEnablePostRequest):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/v1/SubscriptionsApi/Find', tags=['subscription_operations'])
def subscriptions_api__find(body: V1SubscriptionsApiFindPostRequest):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/v1/SubscriptionsApi/List', tags=['subscription_operations'])
def subscriptions_api__list(
    page: Optional[int] = None, body: V1SubscriptionsApiListPostRequest = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/v1/SubscriptionsApi/Save', tags=['subscription_operations'])
def subscriptions_api__save(body: V1SubscriptionsApiSavePostRequest):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete('/v1/SubscriptionsApi/{serial}', tags=['key_operations'])
def subscriptions_api__delete_subscription(
    x__api__key: str = Header(..., alias='X-Api-Key'),
    serial: str = ...,
    keep: bool = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/v1/SubscriptionsApi/{serial}', tags=['key_operations'])
def subscriptions_api__delete_subscription2(
    x__api__key: str = Header(..., alias='X-Api-Key'),
    serial: str = ...,
    keep: bool = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
